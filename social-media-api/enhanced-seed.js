const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const { faker } = require('@faker-js/faker');

// ุฅุนุฏุงุฏ faker ููุนุฑุจูุฉ
faker.locale = 'ar';

// ุชุญุฏูุฏ ุงููุญุชูู ุงูุนุฑุจู ุงููุงูุนู
const arabicContent = {
  posts: [
    'ุตุจุงุญ ุงูุฎูุฑ ุฌููุนุงู! ุฃุชููู ููู ูููุงู ุฑุงุฆุนุงู ูููุฆุงู ุจุงูุฅูุฌุงุฒุงุช ๐',
    'ุดุงุฑูููู ุฑุฃููู ูู ูุฐุง ุงูููุชุฌ ุงูุฌุฏูุฏุ ูู ุชูุตุญูู ุจุดุฑุงุฆูุ ๐ค',
    'ุฃูุถู ุงูุทุฑู ูุชุนูู ุงูุจุฑูุฌุฉ ูู ุงูุตูุฑุ ูุง ุฑุฃูููุ ๐ป',
    'ุฑุญูุฉ ุฑุงุฆุนุฉ ุฅูู ุดูุงุทุฆ ุงูุจุญุฑ ุงูุฃุญูุฑุ ุงูููุงุธุฑ ุฎูุงุจุฉ! ๐๏ธ',
    'ูุตุงุฆุญ ูููุฉ ูุฑูุงุฏุฉ ุงูุฃุนูุงู ูุงููุฌุงุญ ูู ุงููุดุงุฑูุน ุงูุตุบูุฑุฉ ๐',
    'ูุชุงุจ ุฑุงุฆุน ุงูุชููุช ูู ูุฑุงุกุชู ุงููููุ ุฃูุตุญ ุงูุฌููุน ุจูุฑุงุกุชู ๐',
    'ุทุจุฎุฉ ุฌุฏูุฏุฉ ุฌุฑุจุชูุง ุงููููุ ุงููุชูุฌุฉ ูุงูุช ูุฐููุฉ! ๐ฝ๏ธ',
    'ุชูุฑูู ุฑูุงุถู ุตุจุงุญูุ ุงูุฑูุงุถุฉ ูููุฉ ููุตุญุฉ ุงูููุณูุฉ ูุงูุฌุณุฏูุฉ ๐ช',
    'ูุนุฑุถ ูููููู ุงููุญููุฉุ ุฏุนู ุงูููุงููู ุงูุนุฑุจ ููู ุฌุฏุงู ๐จ',
    'ููุงุด ูููุฏ ุญูู ุงูุชูููููุฌูุง ููุณุชูุจู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ๐ค',
    'ูุตูุฉ ุทุจูุนูุฉ ููุนูุงูุฉ ุจุงูุจุดุฑุฉุ ููููุงุช ูู ุงููุทุจุฎ ๐ฅ',
    'ูุดุฑูุน ุชุทูุนู ููุณุงุนุฏุฉ ุงูุฃุทูุงู ุงููุญุชุงุฌููุ ุงูุถููุง ูุนูุง โค๏ธ',
    'ุฏุฑุณ ุฌุฏูุฏ ูู ุงูุชุตููุฑ ุงูููุชูุบุฑุงููุ ุงูุฅุถุงุกุฉ ูู ุงูุณุฑ ๐ธ',
    'ุชุฌุฑุจุฉ ูุทุนู ุฌุฏูุฏ ูู ุงููุฏููุฉุ ุงูุทุนุงู ูุฐูุฐ ูุงูุฎุฏูุฉ ููุชุงุฒุฉ ๐',
    'ูุดุงูุฏุฉ ูููู ุนุฑุจู ุฑุงุฆุนุ ุงูุณูููุง ุงูุนุฑุจูุฉ ุชุชุทูุฑ ุจุดูู ูุฐูู ๐ฌ',
    'ูุตุงุฆุญ ููุญูุงุธ ุนูู ุงูุจูุฆุฉ ูุชูููู ุงุณุชููุงู ุงูุจูุงุณุชูู ๐ฑ',
    'ุฏุฑุณ ูู ุงููุบุฉ ุงูุฅูุฌููุฒูุฉุ ุงูุชุนูู ุงููุณุชูุฑ ููุชุงุญ ุงููุฌุงุญ ๐',
    'ุฒูุงุฑุฉ ููุชุญู ุงูุชุงุฑูุฎ ุงูุทุจูุนูุ ูุนูููุงุช ูุฐููุฉ ุนู ุงูุฏููุงุตูุฑุงุช ๐ฆ',
    'ุชุฌุฑุจุฉ ุชุทุจูู ุฌุฏูุฏ ููุชูุธูู ุงูุดุฎุตูุ ุณุงุนุฏูู ูุซูุฑุงู ๐ฑ',
    'ุฑุญูุฉ ุชุณูู ูู ุงูุณูู ุงูุดุนุจูุ ุฃุณุนุงุฑ ูุนูููุฉ ูููุชุฌุงุช ุฃุตููุฉ ๐๏ธ'
  ],
  platforms: ['Instagram', 'Twitter', 'Facebook', 'TikTok', 'LinkedIn', 'YouTube', 'Snapchat'],
  contentTypes: ['POST', 'STORY', 'REEL', 'VIDEO', 'TWEET', 'ARTICLE', 'PHOTO'],
  cities: ['ุงูุฑูุงุถ', 'ุงููุงูุฑุฉ', 'ุฏุจู', 'ุงูุฏูุญุฉ', 'ุจูุฑูุช', 'ุนูุงู', 'ุงููููุช', 'ุงูููุงูุฉ', 'ูุณูุท', 'ุงูุฑุจุงุท', 'ุชููุณ', 'ุงูุฌุฒุงุฆุฑ'],
  hashtags: ['#ุชุทููุฑ', '#ุจุฑูุฌุฉ', '#ุชูููููุฌูุง', '#ุฑูุงุฏุฉ_ุฃุนูุงู', '#ุชุนููู', '#ุตุญุฉ', '#ุฑูุงุถุฉ', '#ุทุจุฎ', '#ุณูุฑ', '#ูู', '#ููุณููู', '#ูุฑุงุกุฉ']
};

// ุฅุนุฏุงุฏ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
const connectDB = async () => {
  try {
    // ูุฑุงุกุฉ ุฅุนุฏุงุฏุงุช ูู ููู ุงููุต
    const fs = require('fs');
    const envData = fs.readFileSync('./cd411483-63a0-44d6-b48c-706cfddb2264.txt', 'utf8');
    const lines = envData.split('\n');
    lines.forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });

    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('โ ูุชุตู ุจู MongoDB');
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    process.exit(1);
  }
};

// ููุฏููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  bio: String,
  avatar: String,
  isVerified: { type: Boolean, default: false },
  followersCount: { type: Number, default: 0 },
  followingCount: { type: Number, default: 0 },
  postsCount: { type: Number, default: 0 },
  location: String,
  website: String,
  joinedDate: { type: Date, default: Date.now },
  createdAt: { type: Date, default: Date.now }
});

const socialContentSchema = new mongoose.Schema({
  contentId: { type: String, required: true, unique: true },
  platform: { type: String, required: true },
  contentType: { type: String, required: true },
  content: String,
  author: String,
  hashtags: [String],
  mentions: [String],
  location: String,
  language: { type: String, default: 'ar' },
  status: { type: String, default: 'PUBLISHED' },
  visibility: { type: String, default: 'PUBLIC' },
  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  metrics: {
    likes: { type: Number, default: 0 },
    comments: { type: Number, default: 0 },
    shares: { type: Number, default: 0 },
    views: { type: Number, default: 0 },
    saves: { type: Number, default: 0 },
    clicks: { type: Number, default: 0 }
  },
  engagement: {
    rate: { type: Number, default: 0 },
    score: { type: Number, default: 0 }
  },
  scheduledAt: Date,
  publishedAt: { type: Date, default: Date.now },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

const socialAnalyticsSchema = new mongoose.Schema({
  contentId: { type: String, required: true },
  connectionId: String,
  analyticsType: { type: String, required: true },
  platform: { type: String, required: true },
  periodType: { type: String, required: true },
  periodStart: Date,
  periodEnd: Date,
  normalizedMetrics: {
    reach: { type: Number, default: 0 },
    impressions: { type: Number, default: 0 },
    engagement: { type: Number, default: 0 },
    clicks: { type: Number, default: 0 },
    likes: { type: Number, default: 0 },
    comments: { type: Number, default: 0 },
    shares: { type: Number, default: 0 },
    saves: { type: Number, default: 0 },
    profileVisits: { type: Number, default: 0 },
    websiteClicks: { type: Number, default: 0 }
  },
  demographics: {
    ageGroups: [{
      range: String,
      percentage: Number
    }],
    genders: [{
      type: String,
      percentage: Number
    }],
    locations: [{
      country: String,
      percentage: Number
    }]
  },
  snapshotDate: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);
const SocialContent = mongoose.model('SocialContent', socialContentSchema);
const SocialAnalytics = mongoose.model('SocialAnalytics', socialAnalyticsSchema);

// ูุธุงุฆู ุฅูุดุงุก ุงูุจูุงูุงุช
const generateUsers = (count = 60) => {
  const users = [];
  const arabicNames = [
    'ุฃุญูุฏ_ูุญูุฏ', 'ูุงุทูุฉ_ุฃุญูุฏ', 'ูุญูุฏ_ุนูู', 'ุนุงุฆุดุฉ_ุณุงูู', 'ุนูู_ุญุณู',
    'ุฒููุจ_ูุญููุฏ', 'ุญุณู_ุฅุจุฑุงููู', 'ูุฑูู_ููุณู', 'ููุณู_ุนุจุฏุงููู', 'ููุฑ_ุงูุฏูู',
    'ุณุงุฑุฉ_ูุญูุฏ', 'ุนูุฑ_ุฃุญูุฏ', 'ูููู_ุนูู', 'ุฎุงูุฏ_ุญุณู', 'ุฑููุฉ_ููุณู',
    'ุฅุจุฑุงููู_ุณุงูู', 'ุขููุฉ_ูุญููุฏ', 'ุณุงูู_ุนุจุฏุงููู', 'ูุฏู_ุฅุจุฑุงููู', 'ุนุจุฏุงููู_ุฃุญูุฏ',
    'ูุฑูุฏุฉ_ุนูู', 'ูุญููุฏ_ุญุณู', 'ูุงุฏูุฉ_ููุณู', 'ุทุงุฑู_ุณุงูู', 'ุฑูู_ูุญูุฏ',
    'ูููุฏ_ุฃุญูุฏ', 'ุดููุงุก_ุนูู', 'ุณููุฑ_ุญุณู', 'ุฏุนุงุก_ููุณู', 'ุนูุงุฏ_ุณุงูู'
  ];

  for (let i = 0; i < count; i++) {
    const randomName = arabicNames[Math.floor(Math.random() * arabicNames.length)];
    const randomNumber = Math.floor(Math.random() * 1000);
    
    users.push({
      username: `${randomName}_${randomNumber}`,
      email: `user${i + 1}@example.com`,
      password: 'password123', // ุณูุชู ุชุดููุฑูุง
      bio: `${faker.lorem.sentence()} #${arabicContent.hashtags[Math.floor(Math.random() * arabicContent.hashtags.length)]}`,
      avatar: faker.image.avatar(),
      isVerified: Math.random() > 0.8, // 20% ูุญูููู
      followersCount: Math.floor(Math.random() * 10000),
      followingCount: Math.floor(Math.random() * 1000),
      postsCount: Math.floor(Math.random() * 500),
      location: arabicContent.cities[Math.floor(Math.random() * arabicContent.cities.length)],
      website: Math.random() > 0.6 ? faker.internet.url() : null,
      joinedDate: faker.date.past(2)
    });
  }
  return users;
};

const generatePosts = (users, count = 200) => {
  const posts = [];
  
  for (let i = 0; i < count; i++) {
    const randomUser = users[Math.floor(Math.random() * users.length)];
    const randomContent = arabicContent.posts[Math.floor(Math.random() * arabicContent.posts.length)];
    const platform = arabicContent.platforms[Math.floor(Math.random() * arabicContent.platforms.length)];
    const contentType = arabicContent.contentTypes[Math.floor(Math.random() * arabicContent.contentTypes.length)];
    
    // ุฅุถุงูุฉ hashtags ุนุดูุงุฆูุฉ
    const hashtagCount = Math.floor(Math.random() * 4) + 1;
    const selectedHashtags = [];
    for (let j = 0; j < hashtagCount; j++) {
      const hashtag = arabicContent.hashtags[Math.floor(Math.random() * arabicContent.hashtags.length)];
      if (!selectedHashtags.includes(hashtag)) {
        selectedHashtags.push(hashtag);
      }
    }
    
    posts.push({
      contentId: `post_${Date.now()}_${i}_${Math.random().toString(36).substring(7)}`,
      platform,
      contentType,
      content: `${randomContent} ${selectedHashtags.join(' ')}`,
      author: randomUser.username,
      hashtags: selectedHashtags,
      location: arabicContent.cities[Math.floor(Math.random() * arabicContent.cities.length)],
      createdBy: randomUser._id,
      metrics: {
        likes: Math.floor(Math.random() * 5000),
        comments: Math.floor(Math.random() * 500),
        shares: Math.floor(Math.random() * 200),
        views: Math.floor(Math.random() * 50000),
        saves: Math.floor(Math.random() * 100),
        clicks: Math.floor(Math.random() * 1000)
      },
      engagement: {
        rate: Math.random() * 10,
        score: Math.random() * 100
      },
      publishedAt: faker.date.past(1),
      createdAt: faker.date.past(1)
    });
  }
  return posts;
};

const generateAnalytics = (posts, count = 150) => {
  const analytics = [];
  const analyticsTypes = ['CONTENT_PERFORMANCE', 'AUDIENCE_INSIGHTS', 'ENGAGEMENT_METRICS'];
  const periodTypes = ['DAILY', 'WEEKLY', 'MONTHLY'];
  
  for (let i = 0; i < count; i++) {
    const randomPost = posts[Math.floor(Math.random() * posts.length)];
    const periodType = periodTypes[Math.floor(Math.random() * periodTypes.length)];
    const analyticsType = analyticsTypes[Math.floor(Math.random() * analyticsTypes.length)];
    
    const baseDate = faker.date.past(1);
    let periodStart, periodEnd;
    
    switch (periodType) {
      case 'DAILY':
        periodStart = new Date(baseDate);
        periodEnd = new Date(baseDate.getTime() + 24 * 60 * 60 * 1000);
        break;
      case 'WEEKLY':
        periodStart = new Date(baseDate);
        periodEnd = new Date(baseDate.getTime() + 7 * 24 * 60 * 60 * 1000);
        break;
      case 'MONTHLY':
        periodStart = new Date(baseDate);
        periodEnd = new Date(baseDate.getFullYear(), baseDate.getMonth() + 1, baseDate.getDate());
        break;
    }
    
    analytics.push({
      contentId: randomPost.contentId,
      connectionId: `conn_${Math.random().toString(36).substring(7)}`,
      analyticsType,
      platform: randomPost.platform,
      periodType,
      periodStart,
      periodEnd,
      normalizedMetrics: {
        reach: Math.floor(Math.random() * 100000),
        impressions: Math.floor(Math.random() * 500000),
        engagement: Math.floor(Math.random() * 10000),
        clicks: Math.floor(Math.random() * 5000),
        likes: randomPost.metrics.likes + Math.floor(Math.random() * 100),
        comments: randomPost.metrics.comments + Math.floor(Math.random() * 50),
        shares: randomPost.metrics.shares + Math.floor(Math.random() * 20),
        saves: randomPost.metrics.saves + Math.floor(Math.random() * 30),
        profileVisits: Math.floor(Math.random() * 1000),
        websiteClicks: Math.floor(Math.random() * 500)
      },
      demographics: {
        ageGroups: [
          { range: '18-24', percentage: Math.random() * 30 },
          { range: '25-34', percentage: Math.random() * 40 },
          { range: '35-44', percentage: Math.random() * 20 },
          { range: '45+', percentage: Math.random() * 10 }
        ],
        genders: [
          { type: 'male', percentage: Math.random() * 60 },
          { type: 'female', percentage: Math.random() * 40 }
        ],
        locations: arabicContent.cities.slice(0, 5).map(city => ({
          country: city,
          percentage: Math.random() * 20
        }))
      },
      snapshotDate: faker.date.past(1)
    });
  }
  return analytics;
};

// ุงููุธููุฉ ุงูุฑุฆูุณูุฉ ููู seeding
const seedDatabase = async () => {
  try {
    console.log('๐ ุจุฏุก ุนูููุฉ ุฅุถุงูุฉ ุงูุจูุงูุงุช ุงูููููุฉ ุงููุญุณูุฉ...\n');

    // ุญุฐู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ
    console.log('๐๏ธ  ุญุฐู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ...');
    await User.deleteMany({});
    await SocialContent.deleteMany({});
    await SocialAnalytics.deleteMany({});
    console.log('โ ุชู ุญุฐู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ\n');

    // ุฅูุดุงุก ุงููุณุชุฎุฏููู
    console.log('๐ฅ ุฅูุดุงุก 60 ูุณุชุฎุฏู...');
    const usersData = generateUsers(60);
    
    // ุชุดููุฑ ูููุงุช ุงููุฑูุฑ
    for (let user of usersData) {
      user.password = await bcrypt.hash(user.password, 10);
    }
    
    const users = await User.insertMany(usersData);
    console.log(`โ ุชู ุฅูุดุงุก ${users.length} ูุณุชุฎุฏู\n`);

    // ุฅูุดุงุก ุงูููุดูุฑุงุช
    console.log('๐ ุฅูุดุงุก 200 ููุดูุฑ...');
    const postsData = generatePosts(users, 200);
    const posts = await SocialContent.insertMany(postsData);
    console.log(`โ ุชู ุฅูุดุงุก ${posts.length} ููุดูุฑ\n`);

    // ุฅูุดุงุก ุงูุชุญูููุงุช
    console.log('๐ ุฅูุดุงุก 150 ุชุญููู...');
    const analyticsData = generateAnalytics(posts, 150);
    const analytics = await SocialAnalytics.insertMany(analyticsData);
    console.log(`โ ุชู ุฅูุดุงุก ${analytics.length} ุชุญููู\n`);

    // ุฅุญุตุงุฆูุงุช ุงูููุงุฆูุฉ
    console.log('๐ ุฅุญุตุงุฆูุงุช ุงูุจูุงูุงุช ุงูููุถุงูุฉ:');
    console.log(`๐ฅ ุงููุณุชุฎุฏููู: ${users.length}`);
    console.log(`๐ ุงูููุดูุฑุงุช: ${posts.length}`);
    console.log(`๐ ุงูุชุญูููุงุช: ${analytics.length}`);
    
    // ุชูุฒูุน ุงูููุตุงุช
    const platformStats = {};
    posts.forEach(post => {
      platformStats[post.platform] = (platformStats[post.platform] || 0) + 1;
    });
    
    console.log('\n๐ ุชูุฒูุน ุงูููุดูุฑุงุช ุญุณุจ ุงูููุตุฉ:');
    Object.entries(platformStats).forEach(([platform, count]) => {
      console.log(`   ${platform}: ${count} ููุดูุฑ`);
    });

    // ุฅุญุตุงุฆูุงุช ุงููุดุงุฑูุฉ
    const totalLikes = posts.reduce((sum, post) => sum + post.metrics.likes, 0);
    const totalComments = posts.reduce((sum, post) => sum + post.metrics.comments, 0);
    const totalShares = posts.reduce((sum, post) => sum + post.metrics.shares, 0);
    
    console.log('\n๐ซ ุฅุญุตุงุฆูุงุช ุงูุชูุงุนู:');
    console.log(`   ๐ ุฅุฌูุงูู ุงูุฅุนุฌุงุจุงุช: ${totalLikes.toLocaleString()}`);
    console.log(`   ๐ฌ ุฅุฌูุงูู ุงูุชุนูููุงุช: ${totalComments.toLocaleString()}`);
    console.log(`   ๐ ุฅุฌูุงูู ุงููุดุงุฑูุงุช: ${totalShares.toLocaleString()}`);

    console.log('\n๐ ุชู ุฅูุดุงุก ุงูุจูุงูุงุช ุงูููููุฉ ุจูุฌุงุญ!');
    console.log('๐ ููููู ุงูุขู ุชุฌุฑุจุฉ ุงูู API ูุน ุจูุงูุงุช ุบููุฉ ููุชููุนุฉ');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุจูุงูุงุช:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\n๐ ุชู ูุทุน ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
    process.exit(0);
  }
};

// ุชุดุบูู ุงูุนูููุฉ
if (require.main === module) {
  connectDB().then(() => {
    seedDatabase();
  });
}

module.exports = { seedDatabase, connectDB }; 