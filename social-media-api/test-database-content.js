const mongoose = require('mongoose');
const { User } = require('./src/models/User');
const { SocialConnection, SocialContent, SocialAnalytics } = require('./src/models/SocialMediaModels');

// MongoDB URI
const MONGODB_URI = 'mongodb+srv://abdulrahman:201621623An@ac-hg1kzhy.icjtx3t.mongodb.net/socialApi';

async function testDatabaseContent() {
  try {
    console.log('๐ ูุญุต ูุญุชูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    
    await mongoose.connect(MONGODB_URI);
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');

    // ุนุฑุถ ุฅุญุตุงุฆูุงุช ุงูุจูุงูุงุช
    console.log('\n๐ ุฅุญุตุงุฆูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
    console.log('='.repeat(50));
    
    const userCount = await User.countDocuments();
    const connectionCount = await SocialConnection.countDocuments();
    const contentCount = await SocialContent.countDocuments();
    const analyticsCount = await SocialAnalytics.countDocuments();
    
    console.log(`๐ฅ ุงููุณุชุฎุฏููู: ${userCount}`);
    console.log(`๐ ุงูุงุชุตุงูุงุช: ${connectionCount}`);
    console.log(`๐ฑ ุงููุญุชูู: ${contentCount}`);
    console.log(`๐ ุงูุชุญูููุงุช: ${analyticsCount}`);

    // ุนุฑุถ ุนููุงุช ูู ุงูุจูุงูุงุช
    console.log('\n๐ ุนููุงุช ูู ุงูุจูุงูุงุช:');
    console.log('='.repeat(50));

    // ุนุฑุถ 3 ูุณุชุฎุฏููู ุนุดูุงุฆููู
    console.log('\n๐ค ุนููุฉ ูุณุชุฎุฏููู:');
    const sampleUsers = await User.find().limit(3);
    sampleUsers.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.name} (${user.email}) - ${user.role}`);
    });

    // ุนุฑุถ 3 ุงุชุตุงูุงุช ุนุดูุงุฆูุฉ
    console.log('\n๐ ุนููุฉ ุงุชุตุงูุงุช:');
    const sampleConnections = await SocialConnection.find().populate('userId', 'name email').limit(3);
    sampleConnections.forEach((conn, index) => {
      console.log(`   ${index + 1}. ${conn.platform} - ${conn.platformAccountName}`);
      console.log(`      ๐ค ุงููุณุชุฎุฏู: ${conn.userId ? conn.userId.name : 'ุบูุฑ ูุญุฏุฏ'}`);
      console.log(`      ๐ฅ ุงููุชุงุจุนูู: ${(conn.followerCount || 0).toLocaleString()}`);
      console.log(`      โ ุงูุญุงูุฉ: ${conn.connectionStatus}`);
    });

    // ุนุฑุถ 3 ูุญุชููุงุช ุนุดูุงุฆูุฉ
    console.log('\n๐ฑ ุนููุฉ ูุญุชูู:');
    const sampleContent = await SocialContent.find().populate('connection', 'platformAccountName platform').limit(3);
    sampleContent.forEach((content, index) => {
      console.log(`   ${index + 1}. ${content.title}`);
      console.log(`      ๐ฏ ุงูููุน: ${content.contentType}`);
      console.log(`      ๐บ ุงูููุตุฉ: ${content.connection.platform}`);
      console.log(`      ๐ ุงูุญุณุงุจ: ${content.connection.platformAccountName}`);
      console.log(`      ๐ ุงูุญุงูุฉ: ${content.publishStatus}`);
      if (content.mediaFiles && content.mediaFiles.length > 0) {
        console.log(`      ๐ฌ ุงููููุงุช: ${content.mediaFiles[0]}`);
      }
    });

    // ุนุฑุถ 3 ุชุญูููุงุช ุนุดูุงุฆูุฉ
    console.log('\n๐ ุนููุฉ ุชุญูููุงุช:');
    const sampleAnalytics = await SocialAnalytics.find().populate('contentId', 'title').limit(3);
    sampleAnalytics.forEach((analytics, index) => {
      console.log(`   ${index + 1}. ${analytics.contentId.title}`);
      console.log(`      ๐ ุงููุดุงูุฏุงุช: ${analytics.metrics.views.toLocaleString()}`);
      console.log(`      โค๏ธ ุงูุฅุนุฌุงุจุงุช: ${analytics.metrics.likes.toLocaleString()}`);
      console.log(`      ๐ฌ ุงูุชุนูููุงุช: ${analytics.metrics.comments.toLocaleString()}`);
      console.log(`      ๐ ุงููุดุงุฑูุงุช: ${analytics.metrics.shares.toLocaleString()}`);
      console.log(`      ๐ ุงูุชูุงุนู: ${analytics.metrics.engagement.toLocaleString()}`);
    });

    // ุฅุญุตุงุฆูุงุช ุงูููุตุงุช
    console.log('\n๐ฑ ุฅุญุตุงุฆูุงุช ุงูููุตุงุช:');
    const platformStats = await SocialConnection.aggregate([
      { $group: { _id: '$platform', count: { $sum: 1 }, totalFollowers: { $sum: '$followerCount' } } },
      { $sort: { count: -1 } }
    ]);
    
    platformStats.forEach(stat => {
      console.log(`   ${stat._id}: ${stat.count} ุญุณุงุจ - ${stat.totalFollowers.toLocaleString()} ูุชุงุจุน`);
    });

    // ุฃูุถู ุงููุญุชููุงุช (ุญุณุจ ุงููุดุงูุฏุงุช)
    console.log('\n๐ ุฃูุถู ุงููุญุชููุงุช (ุญุณุจ ุงููุดุงูุฏุงุช):');
    const topContent = await SocialAnalytics.find()
      .populate('contentId', 'title contentType platform')
      .sort({ 'metrics.views': -1 })
      .limit(5);
    
    topContent.forEach((analytics, index) => {
      console.log(`   ${index + 1}. ${analytics.contentId.title}`);
      console.log(`      ๐ ${analytics.metrics.views.toLocaleString()} ูุดุงูุฏุฉ`);
      console.log(`      ๐ฏ ${analytics.contentId.contentType} ุนูู ${analytics.contentId.platform}`);
    });

    // ุฅุญุตุงุฆูุงุช ุงูุฃุฏุงุก ุงูุนุงูุฉ
    console.log('\n๐ ุฅุญุตุงุฆูุงุช ุงูุฃุฏุงุก ุงูุนุงูุฉ:');
    const overallStats = await SocialAnalytics.aggregate([
      {
        $group: {
          _id: null,
          totalViews: { $sum: '$metrics.views' },
          totalLikes: { $sum: '$metrics.likes' },
          totalComments: { $sum: '$metrics.comments' },
          totalShares: { $sum: '$metrics.shares' },
          totalEngagement: { $sum: '$metrics.engagement' },
          avgViews: { $avg: '$metrics.views' },
          avgLikes: { $avg: '$metrics.likes' }
        }
      }
    ]);

    if (overallStats.length > 0) {
      const stats = overallStats[0];
      console.log(`   ๐ ุฅุฌูุงูู ุงููุดุงูุฏุงุช: ${stats.totalViews.toLocaleString()}`);
      console.log(`   โค๏ธ ุฅุฌูุงูู ุงูุฅุนุฌุงุจุงุช: ${stats.totalLikes.toLocaleString()}`);
      console.log(`   ๐ฌ ุฅุฌูุงูู ุงูุชุนูููุงุช: ${stats.totalComments.toLocaleString()}`);
      console.log(`   ๐ ุฅุฌูุงูู ุงููุดุงุฑูุงุช: ${stats.totalShares.toLocaleString()}`);
      console.log(`   ๐ ุฅุฌูุงูู ุงูุชูุงุนู: ${stats.totalEngagement.toLocaleString()}`);
      console.log(`   ๐ ูุชูุณุท ุงููุดุงูุฏุงุช: ${Math.round(stats.avgViews).toLocaleString()}`);
      console.log(`   ๐ ูุชูุณุท ุงูุฅุนุฌุงุจุงุช: ${Math.round(stats.avgLikes).toLocaleString()}`);
    }

    console.log('\n๐ ุชู ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    console.log('๐ ููููู ุงูุขู ุงุณุชุฎุฏุงู GraphQL Playground: http://localhost:4000/graphql');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
  } finally {
    await mongoose.disconnect();
    console.log('๐ ุชู ูุทุน ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
    process.exit(0);
  }
}

testDatabaseContent(); 